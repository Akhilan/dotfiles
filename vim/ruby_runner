" <C-r> to run the Ruby code from the current buffer into an output buffer.
" <C-r> in the output buffer to close it again (or q, or ZZ, or :q etc).
" Or use <C-R> from your source buffer to run but keep focus in that buffer.
" TODO: <LocalLeader>r? Pluginize? Handle gets if possible?

function! RubyRun()
  cd %:p:h  " Use file dir as pwd
  redir => m
  silent w ! ruby
  redir END
  cd -  " Back to old dir

  " Reuse or create new buffer. Based on code in Decho
  " http://www.vim.org/scripts/script.php?script_id=120
  if exists("t:rrbufnr") && bufwinnr(t:rrbufnr) > 0
    exe "keepjumps ".bufwinnr(t:rrbufnr)."wincmd W"
    exe 'normal ggdG'
  else
    exe "keepjumps silent! new"
    let t:rrbufnr=bufnr('%')
  end

  put=m
  " Fix Ctrl+M linefeeds.
  silent! %s/\r//
  " Fix extraneous leading blank lines.
  1,2d
  " Set a filetype so we can define a 'close' mapping with the 'run' mapping.
  set ft=ruby-runner
  " Make it a scratch (temporary) buffer.
  setlocal buftype=nofile bufhidden=wipe noswapfile
  " Store the buffer number so we can reuse it.
endfunction

if has("autocmd") && has("gui_macvim")
  au FileType ruby map <buffer> <D-r> :call RubyRun()<CR>
  au FileType ruby imap <buffer> <D-r> <Esc><D-r>

  au FileType ruby map <buffer> <D-R> :call RubyRun()<CR> <C-w>w
  au FileType ruby imap <buffer> <D-R> <Esc><D-R>a

  au FileType ruby-runner map <buffer> <D-r> ZZ
  au FileType ruby-runner map <buffer> q ZZ
endif
